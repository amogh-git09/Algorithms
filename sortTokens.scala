object sortTokens {
  val str = """  NUMBER : "number",
    FIXNUM : "fixnum",
    STRING : "string",
    GETGLOBALOBJ : "getglobalobj",
    SETFL : "setfl",
    SETGLOBAL : "setglobal",
    GETGLOBAL : "getglobal",
    SETA : "seta",
    GETA : "geta",
    RET : "ret",
    ADD : "add",
    SUB : "sub",
    MUL : "mul",
    DIV : "div",
    MOD : "mod",
    BITAND : "bitand",
    BITOR : "bitor",
    LEFTSHIFT : "leftshift",
    RIGHTSHIFT : "rightshift",
    UNSIGNEDRIGHTSHIFT : "unsignedrightshift",
    SPECCONST : "specconst",
    CONST : "const",
    MOVE  : "move",
    JUMP  : "jump",
    JUMPTRUE : "jumptrue",
    JUMPFALSE : "jumpfalse",
    LESSTHAN : "lessthan",
    LESSTHANEQUAL : "lessthanequal",
    NEWARGS : "newargs",
    MAKECLOSURE : "makeclosure",
    GETARG : "getarg",
    GETLOCAL : "getlocal",
    CALL : "call",
    SETLOCAL : "setlocal",
    SETARG : "setarg",
    NEW : "new",
    NEWSEND : "newsend",
    SETARRAY: "setarray",
    GETIDX: "getidx",
    GETPROP: "getprop",
    SEND : "send",
    SETPROP: "setprop",
    INSTANCEOF: "instanceof",
    NOT: "not",
    TYPEOF: "typeof",
    ISOBJECT: "isobject",
    ISUNDEF: "isundef",
    ERROR: "error",
    EQUAL: "equal",
    TAILCALL: "tailcall",
    GETERR: "geterr",
    TRY: "try",
    FINALLY: "finally",
    THROW: "throw",
    EQ: "eq",
    TAILSEND: "tailsend"
    """

    val str2 = """NUMBER,
FIXNUM,
STRING,
REGEXP,
CONST,
SPECCONST,
ADD,
SUB,
MUL,
DIV,
MOD,
BITAND,
BITOR,
JUMPTRUE,
JUMPFALSE,
JUMP,
LEFTSHIFT,
RIGHTSHIFT,
UNSIGNEDRIGHTSHIFT,
LESSTHAN,
LESSTHANEQUAL,
EQ,
EQUAL,
GETPROP,
SETPROP,
SETARRAY,
GETARG,
SETARG,
GETLOCAL,
SETLOCAL,
GETGLOBAL,
  SETGLOBAL,
  MOVE,
  CALL,
  SEND,
  TAILCALL,
  TAILSEND,
  NEWSEND,
  RET,
  MAKECLOSURE,
  MAKEITERATOR,
  NEXTPROPNAME,
  TRY,
  THROW,
  FINALLY,
  NEW,
  INSTANCEOF,
  TYPEOF,
  NOT,
  NEWARGS,
  SETFL,
  ADDSP,
  SUBSP,
  GETIDX,
  ISUNDEF,
  ISOBJECT,
  SETA,
  GETA,
  GETERR,
  GETGLOBALOBJ,
  ERROR,
  UNKNOWN"""

    def main(args: Array[String]) {
      val arr = str.split("\n").flatMap(_.split(",")).map(_.trim).flatMap(_.split(":")).filter(!_.contains(""""""")).map(_.trim).sorted
      arr.foreach(println(_))
      // val arr2 = str2.split("\n").flatMap(_.split(",")).map(_.trim).sorted
      // arr2.foreach(println(_))
    }
}
